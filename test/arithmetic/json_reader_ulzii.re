/* DO NOT MODIFY MANUALLY:
   Auto-generated by codegen_json_reader*/
open Ast_arithmetic;
open Common;
module J = Json_type;
let error = (s, json) =>
  failwith(
    spf("Wrong format: %s, got: %s", s, Json_io.string_of_json(json)),
  );

let rec parse_assignment_statement = (json: J.json_type): assignment_statement => {
  switch (json) {
  | J.Array([
      J.Object([("type", J.String("variable")), ("children", local_var1)]),
      J.Object([("type", J.String("=")), ("children", _)]),
      J.Object([
        ("type", J.String("expression")),
        ("children", local_var2),
      ]),
      J.Object([("type", J.String(";")), ("children", _)]),
    ]) => (
      parse_variable(local_var1),
      "=",
      parse_expression(local_var2),
      ";",
    )
  | _ => error("Bad", json)
  };
}
and parse_comment = (json: J.json_type): token => {
  switch (json) {
  | J.Object([("type", J.String("comment")), ("children", _)]) => "comment"
  | J.Array([]) => ""
  | _ => error("Bad token", json)
  };
}
and parse_expression = (json: J.json_type): expression => {
  switch (json) {
  | J.Array([
      J.Object([("type", J.String("variable")), ("children", xs)]),
    ]) =>
    Intermediate_type3(parse_variable(xs))

  | J.Array([J.Object([("type", J.String("number")), ("children", xs)])]) =>
    Intermediate_type4(parse_number(xs))

  | J.Array([
      J.Object([
        ("type", J.String("expression")),
        ("children", local_var1),
      ]),
      J.Object([("type", J.String("+")), ("children", _)]),
      J.Object([
        ("type", J.String("expression")),
        ("children", local_var2),
      ]),
    ]) =>
    Intermediate_type5((
      parse_expression(local_var1),
      "+",
      parse_expression(local_var2),
    ))

  | J.Array([
      J.Object([
        ("type", J.String("expression")),
        ("children", local_var1),
      ]),
      J.Object([("type", J.String("-")), ("children", _)]),
      J.Object([
        ("type", J.String("expression")),
        ("children", local_var2),
      ]),
    ]) =>
    Intermediate_type6((
      parse_expression(local_var1),
      "-",
      parse_expression(local_var2),
    ))

  | J.Array([
      J.Object([
        ("type", J.String("expression")),
        ("children", local_var1),
      ]),
      J.Object([("type", J.String("*")), ("children", _)]),
      J.Object([
        ("type", J.String("expression")),
        ("children", local_var2),
      ]),
    ]) =>
    Intermediate_type7((
      parse_expression(local_var1),
      "*",
      parse_expression(local_var2),
    ))

  | J.Array([
      J.Object([
        ("type", J.String("expression")),
        ("children", local_var1),
      ]),
      J.Object([("type", J.String("/")), ("children", _)]),
      J.Object([
        ("type", J.String("expression")),
        ("children", local_var2),
      ]),
    ]) =>
    Intermediate_type8((
      parse_expression(local_var1),
      "/",
      parse_expression(local_var2),
    ))

  | J.Array([
      J.Object([
        ("type", J.String("expression")),
        ("children", local_var1),
      ]),
      J.Object([("type", J.String("^")), ("children", _)]),
      J.Object([
        ("type", J.String("expression")),
        ("children", local_var2),
      ]),
    ]) =>
    Intermediate_type9((
      parse_expression(local_var1),
      "^",
      parse_expression(local_var2),
    ))
  | _ => error("Bad expression", json)
  };
}
and parse_expression_statement = (json: J.json_type): expression_statement => {
  switch (json) {
  | J.Array([
      J.Object([
        ("type", J.String("expression")),
        ("children", local_var1),
      ]),
      J.Object([("type", J.String(";")), ("children", _)]),
    ]) => (
      parse_expression(local_var1),
      ";",
    )
  | _ => error("Bad", json)
  };
}
and parse_intermediate1 = (json: J.json_type): intermediate1 => {
  switch (json) {
  | J.Object([
      ("type", J.String("assignment_statement")),
      ("children", xs),
    ]) =>
    Intermediate_type1(parse_assignment_statement(xs))

  | J.Object([
      ("type", J.String("expression_statement")),
      ("children", xs),
    ]) =>
    Intermediate_type2(parse_expression_statement(xs))
  | _ => error("Bad intermediate1", json)
  };
}
and parse_number = (json: J.json_type): token => {
  switch (json) {
  | J.Object([("type", J.String("number")), ("children", _)]) => "number"
  | J.Array([]) => ""
  | _ => error("Bad token", json)
  };
}
and parse_program = (json: J.json_type): program => {
  switch (json) {
  | J.Array(xs) => List.map(parse_intermediate1, xs)
  | _ => error("Bad", json)
  };
}

and parse_variable = (json: J.json_type): token => {
  switch (json) {
  | J.Object([("type", J.String("variable")), ("children", _)]) => "variable"
  | J.Array([]) => ""
  | _ => error("Bad token", json)
  };
};
/*****************************************************************************/
/* Entrypoint */
/*****************************************************************************/
let parse = (file): Ast_arithmetic.program => {
  let json = Json_io.load_json(file);
  switch (json) {
  | J.Object(xs) =>
    let children = List.assoc("children", xs);
    parse_program(children);
  | _ => error("Toplevel", json)
  };
};
